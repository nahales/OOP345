Script started on Sun 13 Aug 2017 02:50:48 PM EDT
nesmaeili@matrix:~/oop345/milestones/m1> whoami
nesmaeili
nesmaeili@matrix:~/oop345/milestones/m1> cat m1.cpp Task,[K.cpp Utilities.cpp
// Milestone 1 - Task Manager - Main Program
// milestone_1.cpp
// Chris Szalwinski
// v1.0 - 24/10/2015
// v2.0 - 15/01/2016
#include <iostream>
#include <fstream>
#include <string>
#include <memory>
#include <vector>
#include "Task.h"
#include "Utilities.h"
using namespace m1;
void loadFromFile(const char*, std::vector<Task>&, std::ostream&);

int main(int argc, char** argv) {
	// process command line arguments
	if (argc != 3) {
		std::cerr << "*** invalid number of arguments ***\n"
			<< "Usage: " << argv[0] << " tasks_file delimiter\n";
		exit(1);
	}
	std::cout << "Command Line Arguments\n----------------------\n";
	std::cout << "Tasks File Specified          = " << argv[1] << "\n";
	std::cout << "File Record Field Delimiter   = " << argv[2][0] << "\n\n";
	Utilities::setDelimiter(argv[2][0]);
	// end of command line processing

	// Load, Accept and Display the Tasks
	//
	std::cout << "\n*** Load and Accept the Tasks ***\n";
	std::vector<Task> tasks;
	loadFromFile(argv[1], tasks, std::cerr);
	std::cout << "\nList of Accepted Tasks\n----------------------\n";
	for (auto& t : tasks)
		t.display(std::cout);

	// Check nextTask
	//
	std::cout << "\nCheck Follow-On Tasks\n---------------------\n";
	int nerr = 0;
	for (auto& t : tasks) {
		try {
			std::cout << t.getNextTask(Task::passed)->getName() << std::endl;
			std::cout << t.getNextTask(Task::redirect)->getName() << std::endl;
		}
		catch (const std::string& msg) {
			std::cerr << msg << std::endl;
			nerr++;
			if (nerr > 3) {
				std::cerr << "*** Further checks suspended ***" << std::endl;
				break;
			}
		}
	}

	// Validate the Tasks
	//
	std::cout << "\nValidating the Accepted Tasks\n-----------------------------\n";
	bool valid = true;
	for (auto i = 0u; i < tasks.size() && valid; i++) {
		bool invalid = true;
		for (auto j = 0u; j < tasks.size() && invalid; j++) {
			if (tasks[i].validate(tasks[j]))
				invalid = false;
		}
		valid = !invalid;
	}
	if (!valid)
		std::cerr << "*** Not all Tasks have been validated ***\n";
	for (auto& t : tasks)
		t.display(std::cout);

	// Terminate
	//
	std::cout << "\nDone!\nPress Enter Key to Exit ... ";
	char c;
	std::cin.get(c);
}

void loadFromFile(const char* fileName, std::vector<Task>& taskSet, std::ostream& os) {
	std::ifstream file(fileName);
	if (!file) {
		os << "*** Cannot open file named " << fileName << " ***\n";
		exit(1);
	}
	while (file) {
		std::string record;
		std::getline(file, record);
		if (file) {
			try {
				std::unique_ptr<Task> entry(new Task(record));
				if (!entry->getName().empty())
					taskSet.push_back(std::move(*entry));
			}
			catch (const std::string& msg) {
				os << msg << std::endl;
			}
		}
	}
}/*************************
* OOP345 - Milestone 1
* Author: Nahal Esmaeili
* Prof: John Blair
* August 02, 2017
*************************/

#include <iomanip>
#include <stdio.h>
#include <string.h>
#include "Task.h"
#include "Utilities.h"

namespace m1 {
	size_t Task::field_width;

	Task::Task(const std::string& pRecord) {
		slots = 1; 
		pNextTask[passed] = nullptr; 
		pNextTask[redirect] = nullptr; 
		size_t pos = 0;
		std::string token;
		Utilities tokenExtract;
		bool more = true;
		for (int i = 0; more; i++) { 
			token = tokenExtract.nextToken(pRecord, pos, more);
			if (!token.empty()) {
				switch (i) { 
				case 0: 
					name = token;
					break;
				case 1: 
					if (more) {
						slots = token;
					}
					break;
				case 2: 
					nextTask[passed] = token;
					break;
				case 3: 
					nextTask[redirect] = token;
					break;
				}
			}

			if (field_width < tokenExtract.getFieldWidth()) {
				field_width = tokenExtract.getFieldWidth();
			}
		}
	}

	bool Task::validate(const Task& task) {
		if (task.name == nextTask[passed]) {
			pNextTask[passed] = &task;
		}
		else if (task.name == nextTask[redirect]) {
			pNextTask[redirect] = &task;
		}
		return (nextTask[passed].empty() || pNextTask[passed]) 
			&& (nextTask[redirect].empty() || pNextTask[redirect]);
	}

	const std::string& Task::getName() const {
		
		return name;
	}

	void Task::display(std::ostream& os) const {
		if (pNextTask[passed]) {
			std::cout << "Task Name      :  " << std::setw(field_width + 3) << "[" + name + "]" << "[" + slots + "]" << std::endl;
			std::cout << "  Continue to  :  " << std::setw(field_width + 3) << "[" + nextTask[passed] + "]" << std::endl;
			if (!nextTask[redirect].empty()) {
				std::cout << "  Redirect to  :  " << std::setw(field_width + 3) << "[" + nextTask[redirect] + "]" << std::endl;
			}
		}
		else {
			if (nextTask[passed].empty()) { 
				std::cout << "Task Name      :  " << std::left << std::setw(field_width + 3) << "[" + name + "]" << "[1]" << std::endl;
			}
			else {
				std::cout << "Task Name      :  " << std::left << std::setw(field_width + 3) << "[" + name + "]" << "[" + slots + "]" << "*** to be validated ***" << std::endl;
				std::cout << "  Continue to  :  " << std::left << std::setw(field_width + 6) << "[" + nextTask[passed] + "]" << "*** to be validated ***" << std::endl;

				if (!nextTask[redirect].empty()) {
					std::cout << "  Redirect to  :  " << std::left << std::setw(field_width + 6) << "[" + nextTask[redirect] + "]" << "*** to be validated ***" << std::endl;

				}
			}
		}
	}

	size_t Task::getFieldWidth() {
		return field_width;
	}

	bool operator==(const Task& task_a, const Task& task_b) {
		
		return task_a.getName().compare(task_b.getName()) ? 0 : 1;
	}

	const Task* Task::getNextTask(Quality quantity) const {
		int vi;
		if (pNextTask[0] == nullptr) {
			throw std::string("*** Validate [" + nextTask[passed] + "]  @  [" + name + "] ***");
		}
		switch (quantity) {
		case 1:  
			vi = passed;
			break;
		case 0:  
			vi = redirect;
			break;
		}
		return pNextTask[vi];
	}
}/*************************
* OOP345 - Milestone 1
* Author: Nahal Esmaeili
* Prof: John Blair
* August 02, 2017
*************************/

#include <iostream>
#include <string>
#include <algorithm> 
#include <functional> 
#include <cctype>
#include <locale>
#include "Utilities.h"

namespace m1 {
	char Utilities::delimiter;
	std::ofstream Utilities::logFile;

	Utilities::Utilities() {
		field_width = 1;
	}

	void Utilities::setFieldWidth(size_t fw) {
		field_width = fw;
	}

	size_t Utilities::getFieldWidth() const {
		return this->field_width;
	}

	const std::string Utilities::nextToken(const std::string& str, size_t& next_pos, bool& more) {
		bool isValid = false;
		std::string token;
		try {
			for (int i = next_pos; i < 1000; i++) {
				if (str[0] == delimiter) {
					if (str[i + 1] == delimiter) { 
						next_pos = i + 1;
						throw std::string(str + "<-- *** no token found before the delimiter ***");
					}
					else { 
						field_width = str.size();
						throw std::string(str + " <-- *** no token found before the delimiter ***");
					}
				}
				if (str[i] == '\0') { 
					token = str.substr(next_pos, i - next_pos);
					if (field_width < i - next_pos) {
						field_width = i - next_pos;
					}
					more = false; 
					break; 
				}
				else if (str[i] == delimiter) {
					token = str.substr(next_pos, i - next_pos);
					if (field_width < i - next_pos) { 
						field_width = i - next_pos;
					}
					next_pos = i + 1;
					more = true; 
					break; 
				}
			}
			while (!isValid && !token.empty()) { 
				if (token.at(0) == ' ') { token.erase(0, 1); }
				else if (token.back() == ' ') { token.erase(token.length() - 1, 1); }
				else { isValid = true; }
			}
		}
		catch (const std::string& msg) {
			std::cout << msg << std::endl;
			more = false;
		}
		return token; 
	}

	void Utilities::setDelimiter(const char pDelim) {
		Utilities::delimiter = pDelim;
	}

	void Utilities::setLogFile(const char* logfile) {
		logFile.close();
		logFile.open(logfile);
	}

	std::ofstream& Utilities::getLogFile() {
		return logFile;
	}
}nesmaeili@matrix:~/oop345/milestones/m1> g++ -o m1 -std=c++0x mq[K1.cpp Tasl[Kk.cpp Ut ilities.cpp[K[Anesmaeili@matrix:~/oop345/milestones/m1> g++ -o m1 -std=c++0x m1.cpp Task.cpp Utilities.cpp
nesmaeili@matrix:~/oop345/milestones/m1> m1 Task[K[K[K[KBasicTask.dat \\[K|
Command Line Arguments
----------------------
Tasks File Specified          = BasicTask.dat
File Record Field Delimiter   = |


*** Load and Accept the Tasks ***

List of Accepted Tasks
----------------------
Task Name      :  [Power Supply]         [4]*** to be validated ***
  Continue to  :  [Motherboard]             *** to be validated ***
Task Name      :  [Remove Power Supply]  [4]*** to be validated ***
  Continue to  :  [Power Supply]            *** to be validated ***
Task Name      :  [Motherboard]          [3]*** to be validated ***
  Continue to  :  [CPU]                     *** to be validated ***
  Redirect to  :  [Remove CPU]              *** to be validated ***
Task Name      :  [Remove CPU]           [1]*** to be validated ***
  Continue to  :  [CPU]                     *** to be validated ***
Task Name      :  [CPU]                  [5]*** to be validated ***
  Continue to  :  [Memory]                  *** to be validated ***
  Redirect to  :  [Remove CPU]              *** to be validated ***
Task Name      :  [Remove CPU]           [1]*** to be validated ***
  Continue to  :  [CPU]                     *** to be validated ***
Task Name      :  [Memory]               [4]*** to be validated ***
  Continue to  :  [SSD]                     *** to be validated ***
  Redirect to  :  [Remove Memory]           *** to be validated ***
Task Name      :  [Remove Memory]        [1]*** to be validated ***
  Continue to  :  [Memory]                  *** to be validated ***
Task Name      :  [SSD]                  [4]*** to be validated ***
  Continue to  :  [GPU]                     *** to be validated ***
  Redirect to  :  [Remove SSD]              *** to be validated ***
Task Name      :  [Remove SSD]           [1]*** to be validated ***
  Continue to  :  [SSD]                     *** to be validated ***
Task Name      :  [GPU]                  [3]*** to be validated ***
  Continue to  :  [Test]                    *** to be validated ***
Task Name      :  [Remove GPU]           [3]*** to be validated ***
  Continue to  :  [GPU]                     *** to be validated ***
Task Name      :  [Test]                 [4]*** to be validated ***
  Continue to  :  [Approve]                 *** to be validated ***
  Redirect to  :  [Repair]                  *** to be validated ***
Task Name      :  [Repair]               [1]
Task Name      :  [Approve]              [1]
Task Name      :  [Repair]               [1]

Check Follow-On Tasks
---------------------
*** Validate [Motherboard]  @  [Power Supply] ***
*** Validate [Power Supply]  @  [Remove Power Supply] ***
*** Validate [CPU]  @  [Motherboard] ***
*** Validate [CPU]  @  [Remove CPU] ***
*** Further checks suspended ***

Validating the Accepted Tasks
-----------------------------
Task Name      :  [Power Supply]         [4]
  Continue to  :  [Motherboard]          
Task Name      :  [Remove Power Supply]  [4]
  Continue to  :  [Power Supply]         
Task Name      :  [Motherboard]          [3]
  Continue to  :  [CPU]                  
  Redirect to  :  [Remove CPU]           
Task Name      :  [Remove CPU]           [1]
  Continue to  :  [CPU]                  
Task Name      :  [CPU]                  [5]
  Continue to  :  [Memory]               
  Redirect to  :  [Remove CPU]           
Task Name      :  [Remove CPU]           [1]
  Continue to  :  [CPU]                  
Task Name      :  [Memory]               [4]
  Continue to  :  [SSD]                  
  Redirect to  :  [Remove Memory]        
Task Name      :  [Remove Memory]        [1]
  Continue to  :  [Memory]               
Task Name      :  [SSD]                  [4]
  Continue to  :  [GPU]                  
  Redirect to  :  [Remove SSD]           
Task Name      :  [Remove SSD]           [1]
  Continue to  :  [SSD]                  
Task Name      :  [GPU]                  [3]
  Continue to  :  [Test]                 
Task Name      :  [Remove GPU]           [3]
  Continue to  :  [GPU]                  
Task Name      :  [Test]                 [4]
  Continue to  :  [Approve]              
  Redirect to  :  [Repair]               
Task Name      :  [Repair]               [1]
Task Name      :  [Approve]              [1]
Task Name      :  [Repair]               [1]

Done!
Press Enter Key to Exit ... 
nesmaeili@matrix:~/oop345/milestones/m1> m1 CleanTask.dat \|
Command Line Arguments
----------------------
Tasks File Specified          = CleanTask.dat
File Record Field Delimiter   = |


*** Load and Accept the Tasks ***

List of Accepted Tasks
----------------------
Task Name      :  [Power Supply]  [4]*** to be validated ***
  Continue to  :  [Motherboard]      *** to be validated ***
Task Name      :  [Motherboard]   [3]*** to be validated ***
  Continue to  :  [CPU]              *** to be validated ***
  Redirect to  :  [Remove CPU]       *** to be validated ***
Task Name      :  [Remove CPU]    [1]*** to be validated ***
  Continue to  :  [CPU]              *** to be validated ***
Task Name      :  [CPU]           [5]*** to be validated ***
  Continue to  :  [Memory]           *** to be validated ***
  Redirect to  :  [Remove CPU]       *** to be validated ***
Task Name      :  [Remove CPU]    [1]*** to be validated ***
  Continue to  :  [CPU]              *** to be validated ***
Task Name      :  [Memory]        [4]*** to be validated ***
  Continue to  :  [SSD]              *** to be validated ***
  Redirect to  :  [Remove Memory]    *** to be validated ***
Task Name      :  [Remove Memory] [1]*** to be validated ***
  Continue to  :  [Memory]           *** to be validated ***
Task Name      :  [SSD]           [4]*** to be validated ***
  Continue to  :  [GPU]              *** to be validated ***
  Redirect to  :  [Remove SSD]       *** to be validated ***
Task Name      :  [Remove SSD]    [1]*** to be validated ***
  Continue to  :  [SSD]              *** to be validated ***
Task Name      :  [GPU]           [3]*** to be validated ***
  Continue to  :  [Test]             *** to be validated ***
Task Name      :  [Test]          [4]*** to be validated ***
  Continue to  :  [Approve]          *** to be validated ***
  Redirect to  :  [Repair]           *** to be validated ***
Task Name      :  [Repair]        [1]
Task Name      :  [Approve]       [1]

Check Follow-On Tasks
---------------------
*** Validate [Motherboard]  @  [Power Supply] ***
*** Validate [CPU]  @  [Motherboard] ***
*** Validate [CPU]  @  [Remove CPU] ***
*** Validate [Memory]  @  [CPU] ***
*** Further checks suspended ***

Validating the Accepted Tasks
-----------------------------
Task Name      :  [Power Supply]  [4]
  Continue to  :  [Motherboard]   
Task Name      :  [Motherboard]   [3]
  Continue to  :  [CPU]           
  Redirect to  :  [Remove CPU]    
Task Name      :  [Remove CPU]    [1]
  Continue to  :  [CPU]           
Task Name      :  [CPU]           [5]
  Continue to  :  [Memory]        
  Redirect to  :  [Remove CPU]    
Task Name      :  [Remove CPU]    [1]
  Continue to  :  [CPU]           
Task Name      :  [Memory]        [4]
  Continue to  :  [SSD]           
  Redirect to  :  [Remove Memory] 
Task Name      :  [Remove Memory] [1]
  Continue to  :  [Memory]        
Task Name      :  [SSD]           [4]
  Continue to  :  [GPU]           
  Redirect to  :  [Remove SSD]    
Task Name      :  [Remove SSD]    [1]
  Continue to  :  [SSD]           
Task Name      :  [GPU]           [3]
  Continue to  :  [Test]          
Task Name      :  [Test]          [4]
  Continue to  :  [Approve]       
  Redirect to  :  [Repair]        
Task Name      :  [Repair]        [1]
Task Name      :  [Approve]       [1]

Done!
Press Enter Key to Exit ... 
nesmaeili@matrix:~/oop345/milestones/m1> m1 MalformedTask.dat \|
Command Line Arguments
----------------------
Tasks File Specified          = MalformedTask.dat
File Record Field Delimiter   = |


*** Load and Accept the Tasks ***

List of Accepted Tasks
----------------------
Task Name      :  [Power Supply]       [1]
Task Name      :  [Motherboard]        [3]*** to be validated ***
  Continue to  :  [CPU]                   *** to be validated ***
  Redirect to  :  [Remove CPU]            *** to be validated ***

Check Follow-On Tasks
---------------------
*** Validate []  @  [Power Supply] ***
*** Validate [CPU]  @  [Motherboard] ***

Validating the Accepted Tasks
-----------------------------
*** Not all Tasks have been validated ***
Task Name      :  [Power Supply]       [1]
Task Name      :  [Motherboard]        [3]*** to be validated ***
  Continue to  :  [CPU]                   *** to be validated ***
  Redirect to  :  [Remove CPU]            *** to be validated ***

Done!
Press Enter Key to Exit ... 
nesmaeili@matrix:~/oop345/milestones/m1> exit
exit

Script done on Sun 13 Aug 2017 02:54:09 PM EDT
