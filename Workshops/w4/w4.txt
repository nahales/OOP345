Script started on Sat 12 Aug 2017 06:22:50 PM EDT
nesmaeili@matrix:~/oop345/workshops/w4> whoami
nesmaeili
nesmaeili@matrix:~/oop345/workshops/w4> cat w4.cpp KVList.h
// Workshop 4 - Templates
// w4.cpp

#include <iostream>
#include <iomanip>
#include <string>
#include "KVList.h"

template <typename K, typename V, int N>
void display(const std::string& msg, const KVList<K, V, N>& list, int w) {
	std::cout << msg;
	for (int i = 0; i < list.size(); i++)
		std::cout << std::setw(w) << list.key(i)
		<< " : " << list.value(i) << std::endl;
}

int main(int argc, char** argv) {
	if (argc != 1) {
		std::cerr << argv[0] << ": too many arguments\n";
		return 1;
	}

	int width;
	bool keepreading;
	std::cout << std::fixed << std::setprecision(2);

	std::cout << "\nInventory\n=========\n";
	KVList <std::string, double, 5> inventory;
	std::string str;
	double price;

	keepreading = true;
	do {
		std::cout << "Product : ";
		getline(std::cin, str);
		if (str.compare("quit") == 0) {
			keepreading = false;
		}
		else {
			std::cout << "Price : ";
			std::cin >> price;
			std::cin.ignore();
			inventory.add(str, price);
		}
	} while (keepreading);
	display("\nPrice List\n----------\n", inventory, 13);

	std::cout << "\nCorrections\n-----------\n";
	keepreading = true;
	do {
		std::cout << "Product : ";
		getline(std::cin, str);
		if (str.compare("quit") == 0) {
			keepreading = false;
		}
		else {
			int i = inventory.find(str);
			if (i != -1) {
				std::cout << "Price : ";
				std::cin >> price;
				std::cin.ignore();
				inventory.replace(i, str, price);
			}
		}
	} while (keepreading);
	display("\nPrice List\n----------\n", inventory, 13);

	std::cout << "\nGlossary\n========\n";
	KVList <std::string, std::string, 5> glossary;
	std::string key, definition;

	keepreading = true;
	do {
		std::cout << "Key : ";
		getline(std::cin, key);
		if (key.compare("quit") == 0) {
			keepreading = false;
		}
		else {
			std::cout << "Definition : ";
			getline(std::cin, definition);
			glossary.add(key, definition);
		}
	} while (keepreading);
	display("\nEntries\n-------\n", glossary, 5);
}#pragma once
/*************************
* OOP345 - Workshop 4
* Author: Nahal Esmaeili
* Prof: John Blair
* August 10, 2017
*************************/
#include <iostream>
using namespace std;

template <typename K, typename V, int N>

class KVList {

	K k[N];
	V v[N];
	size_t count;   //C++14

public:
	KVList()  //default constructor - adopts a safe empty state
		: count(0) {}

	size_t size() const  //returns the number of entires in the key - value list
	{
		return count;
	}

	const K& key(int i) const   //returns an unmodifiable reference to the key of element i in the list
	{
		return k[i];
	}

	const V& value(int i) const  // returns an unmodifiable reference to the value of element i in the list
	{
		return v[i];
	}

	KVList& add(const K& kk, const V& vv)   //adds a new element to the list if room exists and returns a
											//reference to the current object, does nothing if no room exists
	{
		if (count < N) {
			k[count] = kk;
			v[count] = vv;
				count++;
		}
		return *this;
	}

	int find(const K& kk) const  //returns the index of the first element in the list with a key equal to k - defaults to 0
	{
		for (int i = 0; i < count; i++)
		{
			if (kk == k[i])
				return i;
		}
		return 0;
	}

	KVList& replace(int i, const K& kk, const V& vv) //replaces element i in the list with the key and value 
													//received and returns a reference to the current object
	{
		if (i < count) {
			k[i] = kk;
			v[i] = vv;
		}
		return *this;
	}
};nesmaeili@matrix:~/oop345/workshops/w4> g++ -o w4 w4.cpp
nesmaeili@matrix:~/oop345/workshops/w4> w4

Inventory
=========
Product : Pizza
Price : 4.49
Product : Pierogi
Price : 2.56
Product : Potato Chips
Price : 2.29
Product : Black Tea
Price : 4.49
Product : Green Tea
Price : 3.46
Product : Fruit Tea
Price : 2.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 4.49
    Green Tea : 3.46

Corrections
-----------
Product : Black Tea
Price : 5.29
Product : quit

Price List
----------
        Pizza : 4.49
      Pierogi : 2.56
 Potato Chips : 2.29
    Black Tea : 5.29
    Green Tea : 3.46

Glossary
========
Key : CPU
Definition : central processing unit
Key : ALU
Definition : arithmetic logic unit
Key : quit

Entries
-------
  CPU : central processing unit
  ALU : arithmetic logic unit
nesmaeili@matrix:~/oop345/workshops/w4> exit
exit

Script done on Sat 12 Aug 2017 06:26:31 PM EDT
